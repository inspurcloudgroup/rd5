#  学习总结

## 学习感悟



作为一个程序员一定要细心，一时的粗心大意可能浪费很长时间，今天的知识由于时间的关系学的不是很扎实，明天要回顾一下。















## 学习笔记

### 环境变量的设置修

**变量**

Shell 变量，所谓变量就是计算机中用于记录一个值（不一定是数值，也可以是字符或字符串）的符号，而这些符号将用于不同的运算处理中。通常变量与值是一对一的关系，可以通过表达式读取它的值并赋值给其它变量，也可以直接指定数值赋值给任意变量。为了便于运算和处理，大部分的编程语言会区分变量的类型，用于分别记录数值、字符或者字符串等等数据类型。Shell 中的变量也基本如此，有不同类型（但不用专门指定类型名），可以参与运算，有作用域限

`declare` 命令创建一个变量

 `=` 号赋值运算符

读取变量的值，使用 `echo` 命令和 `$` 符号（**$ 符号用于表示引用一个变量的值**

量名只能是英文字母、数字或者下划线，且不能以数字作为开头

![img](https://doc.shiyanlou.com/linux_base/5-2.png/wm)

变量类型有三种：

 

- 当前 Shell 进程私有用户自定义变量，如上面我们创建的 tmp 变量，只在当前 Shell 中有效。

- Shell 本身内建的变量。

- 从自定义变量导出的环境变量

  | `set`    | 显示当前 Shell 所有变量，包括其内建环境变量（与 Shell 外观等相关），用户自定义变量及导出的环境变量。 |
  | -------- | ------------------------------------------------------------ |
  | `env`    | 显示与当前用户相关的环境变量，还可以让命令在指定环境中运行。 |
  | `export` | 显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量。 |

量的生存周期来划分，Linux 变量可分为两类：

 

1. 永久的：需要修改配置文件，变量永久生效；

2. 临时的：使用 export 命令行声明即可，变量在关闭 shell 时失效

   ### 命令的查找路径与顺序

   ![1558701970093](C:\Users\韩冬\AppData\Roaming\Typora\typora-user-images\1558701970093.png)

意到 `PATH` 里面的路径是以 `:` 作为分割符的，所以我们可以这样添加自定义路径

### 修改和删除已有变量

| 变量设置方式                   | 说明                                         |
| :----------------------------- | :------------------------------------------- |
| `${变量名#匹配字串}`           | 从头向后开始匹配，删除符合匹配字串的最短数据 |
| `${变量名##匹配字串}`          | 从头向后开始匹配，删除符合匹配字串的最长数据 |
| `${变量名%匹配字串}`           | 从尾向前开始匹配，删除符合匹配字串的最短数据 |
| `${变量名%%匹配字串}`          | 从尾向前开始匹配，删除符合匹配字串的最长数据 |
| `${变量名/旧的字串/新的字串}`  | 将符合旧字串的第一个字串替换为新的字串       |
| `${变量名//旧的字串/新的字串}` | 将符合旧字串的全部字串替换为新的字串         |

**变量删除**

用 `unset` 命令删除一个环境变量

### 让环境变量生效

![1558702537155](C:\Users\韩冬\AppData\Roaming\Typora\typora-user-images\1558702537155.png)

### 搜索文件

搜索相关的命令常用的有 `whereis`，`which`，`find` 和 `locate`

`whereis` 只能搜索二进制文件(-b)，man 帮助文件(-m)和源代码文件(-s)。如果想要获得更全面的搜索结果可以使用 `locate` 命令

`locate` 快而全

通过“ /var/lib/mlocate/mlocate.db ”数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行 `updatedb` 命令更新一次，所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次 `updatedb` 命令（在我们的环境中必须先执行一次该命令）。它可以用来查找指定目录下的不同文件类型，如查找 /etc 下所有以 sh 开头的文件

- **which 小而精**

 

`which` 本身是 Shell 内建的一个命令，我们通常使用 `which` 来确定是否安装了某个指定的软件，因为它只从 `PATH` 环境变量指定的路径中去搜索命令

- **find 精而细**

 

`find` 应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索。`find` 命令强大到，要把它讲明白至少需要单独好几节课程才行，我们这里只介绍一些常用的内容。

 

这条命令表示去 /etc/ 目录下面 ，搜索名字叫做 interfaces 的文件或者目录。这是 find 命令最常见的格式，千万记住 find 的第一个参数是要搜索的地方：

与时间相关的命令参数：

 

| 参数     | 说明                   |
| :------- | :--------------------- |
| `-atime` | 最后访问时间           |
| `-ctime` | 最后修改文件内容的时间 |
| `-mtime` | 最后修改文件属性的时间 |

 

下面以 `-mtime` 参数举例：

 

- `-mtime n`：n 为数字，表示为在 n 天之前的“一天之内”修改过的文件
- `-mtime +n`：列出在 n 天之前（不包含 n 天本身）被修改过的文件
- `-mtime -n`：列出在 n 天之内（包含 n 天本身）被修改过的文件
- `-newer file`：file 为一个已存在的文件，列出比 file 还要新的文件名



![1558703310108](C:\Users\韩冬\AppData\Roaming\Typora\typora-user-images\1558703310108.png)
